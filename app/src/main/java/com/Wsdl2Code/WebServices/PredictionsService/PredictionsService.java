package com.Wsdl2Code.WebServices.PredictionsService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 10/19/2017 10:20:46 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.Wsdl2Code.WebServices.PredictionsService.WS_Enums.*;
import com.solvetec.derek.tides.dfo_REST.SearchParams;

import java.util.List;

import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;

import java.util.Vector;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import android.os.AsyncTask;
import android.util.Log;

import org.ksoap2.serialization.MarshalFloat;

public class PredictionsService {

    //    public String NAMESPACE ="http://client.ws.shc.gc.ca";
    public String NAMESPACE = "https://ws-shc.qc.dfo-mpo.gc.ca/predictions";
    public String url = "https://ws-shc.qc.dfo-mpo.gc.ca/predictions";
    public int timeOut = 180;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;

    public PredictionsService() {
    }

    public PredictionsService(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public PredictionsService(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public PredictionsService(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void getInfoAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getInfoAsync(null);
    }

    public void getInfoAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return getInfo(headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getInfo", result);
                }
            }
        }.execute();
    }

    public String getInfo() {
        return getInfo(null);
    }

    public String getInfo(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getInfo");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getInfo", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void getVersionAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getVersionAsync(null);
    }

    public void getVersionAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return getVersion(headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getVersion", result);
                }
            }
        }.execute();
    }

    public String getVersion() {
        return getVersion(null);
    }

    public String getVersion(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getVersion");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getVersion", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getVersion", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void getBoundaryDepthAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getBoundaryDepthAsync(null);
    }

    public void getBoundaryDepthAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, BoundaryDepth>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected BoundaryDepth doInBackground(Void... params) {
                return getBoundaryDepth(headers);
            }

            @Override
            protected void onPostExecute(BoundaryDepth result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getBoundaryDepth", result);
                }
            }
        }.execute();
    }

    public BoundaryDepth getBoundaryDepth() {
        return getBoundaryDepth(null);
    }

    public BoundaryDepth getBoundaryDepth(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getBoundaryDepth");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getBoundaryDepth", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getBoundaryDepth", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    BoundaryDepth resultVariable = new BoundaryDepth(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void getBoundarySpatialAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getBoundarySpatialAsync(null);
    }

    public void getBoundarySpatialAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, BoundarySpatial>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected BoundarySpatial doInBackground(Void... params) {
                return getBoundarySpatial(headers);
            }

            @Override
            protected void onPostExecute(BoundarySpatial result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getBoundarySpatial", result);
                }
            }
        }.execute();
    }

    public BoundarySpatial getBoundarySpatial() {
        return getBoundarySpatial(null);
    }

    public BoundarySpatial getBoundarySpatial(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getBoundarySpatial");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getBoundarySpatial", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getBoundarySpatial", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    BoundarySpatial resultVariable = new BoundarySpatial(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void getNameAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getNameAsync(null);
    }

    public void getNameAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return getName(headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getName", result);
                }
            }
        }.execute();
    }

    public String getName() {
        return getName(null);
    }

    public String getName(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getName");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getName", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getName", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void getResourceBundleAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getResourceBundleAsync(null);
    }

    public void getResourceBundleAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Void>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Void doInBackground(Void... params) {
                getResourceBundle(headers);
                return null;
            }

            @Override
            protected void onPostExecute(Void result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getResourceBundle", result);
                }
            }
        }.execute();
    }

    public void getResourceBundle() {
        getResourceBundle(null);
    }

    public void getResourceBundle(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getResourceBundle");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getResourceBundle", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getResourceBundle", soapEnvelope);
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

//    public void getStatusAsync() throws Exception{
//        if (this.eventHandler == null)
//            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
//        getStatusAsync(null);
//    }
//
//    public void getStatusAsync(final List<HeaderProperty> headers) throws Exception{
//
//        new AsyncTask<Void, Void, Status>(){
//            @Override
//            protected void onPreExecute() {
//                eventHandler.Wsdl2CodeStartedRequest();
//            };
//            @Override
//            protected Status doInBackground(Void... params) {
//                return getStatus();
//            }
//            @Override
//            protected void onPostExecute(Status result)
//            {
//                eventHandler.Wsdl2CodeEndedRequest();
//                if (result != null){
//                    eventHandler.Wsdl2CodeFinished("getStatus", result);
//                }
//            }
//        }.execute();
//    }

    public Status getStatus() {
        return getStatus(null);
    }

    public Status getStatus(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getStatus");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getStatus", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getStatus", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    Status resultVariable = new Status(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void getMetadataAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getMetadataAsync(null);
    }

    public void getMetadataAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorMetadata>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorMetadata doInBackground(Void... params) {
                return getMetadata(headers);
            }

            @Override
            protected void onPostExecute(VectorMetadata result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getMetadata", result);
                }
            }
        }.execute();
    }

    public VectorMetadata getMetadata() {
        return getMetadata(null);
    }

    public VectorMetadata getMetadata(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getMetadata");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getMetadata", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getMetadata", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Vector<SoapObject> obj = (Vector<SoapObject>) result.getProperty(0);
                    VectorMetadata resultVariable = new VectorMetadata(obj);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void getLocalizedStringAsync(String in0, VectorObject in1) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getLocalizedStringAsync(in0, in1, null);
    }

    public void getLocalizedStringAsync(final String in0, final VectorObject in1, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return getLocalizedString(in0, in1, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getLocalizedString", result);
                }
            }
        }.execute();
    }

    public String getLocalizedString(String in0, VectorObject in1) {
        return getLocalizedString(in0, in1, null);
    }

    public String getLocalizedString(String in0, VectorObject in1, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getLocalizedString");
        soapReq.addProperty("in0", in0);
        soapReq.addProperty("in1", in1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getLocalizedString", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getLocalizedString", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void getBoundaryDateAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getBoundaryDateAsync(null);
    }

    public void getBoundaryDateAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, BoundaryDate>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected BoundaryDate doInBackground(Void... params) {
                return getBoundaryDate(headers);
            }

            @Override
            protected void onPostExecute(BoundaryDate result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getBoundaryDate", result);
                }
            }
        }.execute();
    }

    public BoundaryDate getBoundaryDate() {
        return getBoundaryDate(null);
    }

    public BoundaryDate getBoundaryDate(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getBoundaryDate");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getBoundaryDate", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getBoundaryDate", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    BoundaryDate resultVariable = new BoundaryDate(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void getDataInfoAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getDataInfoAsync(null);
    }

    public void getDataInfoAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorMetadata>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorMetadata doInBackground(Void... params) {
                return getDataInfo(headers);
            }

            @Override
            protected void onPostExecute(VectorMetadata result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getDataInfo", result);
                }
            }
        }.execute();
    }

    public VectorMetadata getDataInfo() {
        return getDataInfo(null);
    }

    public VectorMetadata getDataInfo(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getDataInfo");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getDataInfo", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getDataInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Vector<SoapObject> obj = (Vector<SoapObject>) result.getProperty(0);
                    VectorMetadata resultVariable = new VectorMetadata(obj);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void getMetadataInfoAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getMetadataInfoAsync(null);
    }

    public void getMetadataInfoAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorMetadata>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorMetadata doInBackground(Void... params) {
                return getMetadataInfo(headers);
            }

            @Override
            protected void onPostExecute(VectorMetadata result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getMetadataInfo", result);
                }
            }
        }.execute();
    }

    public VectorMetadata getMetadataInfo() {
        return getMetadataInfo(null);
    }

    public VectorMetadata getMetadataInfo(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "getMetadataInfo");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/getMetadataInfo", soapEnvelope, headers);
            } else {
                httpTransport.call(NAMESPACE + "/getMetadataInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Vector<SoapObject> obj = (Vector<SoapObject>) result.getProperty(0);
                    VectorMetadata resultVariable = new VectorMetadata(obj);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void searchAsync(String dataName, double latitudeMin, double latitudeMax, double longitudeMin, double longitudeMax, double depthMin, double depthMax, String dateMin, String dateMax, int start, int sizeMax, boolean metadata, String metadataSelection, String order) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchAsync(dataName, latitudeMin, latitudeMax, longitudeMin, longitudeMax, depthMin, depthMax, dateMin, dateMax, start, sizeMax, metadata, metadataSelection, order, null);
    }

    public void searchAsync(final String dataName, final double latitudeMin, final double latitudeMax, final double longitudeMin, final double longitudeMax, final double depthMin, final double depthMax, final String dateMin, final String dateMax, final int start, final int sizeMax, final boolean metadata, final String metadataSelection, final String order, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, ResultSet>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected ResultSet doInBackground(Void... params) {
                return search(dataName, latitudeMin, latitudeMax, longitudeMin, longitudeMax, depthMin, depthMax, dateMin, dateMax, start, sizeMax, metadata, metadataSelection, order, headers);
            }

            @Override
            protected void onPostExecute(ResultSet result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("search", result);
                }
            }
        }.execute();
    }

    public ResultSet search(SearchParams p) {
        return search(p.dataName, p.latitudeMin, p.latitudeMax, p.longitudeMin, p.longitudeMax, p.depthMin, p.depthMax, p.dateMin, p.dateMax, p.start, p.sizeMax, p.metadata, p.metadataSelection, p.order);
    }

    public ResultSet search(String dataName, double latitudeMin, double latitudeMax, double longitudeMin, double longitudeMax, double depthMin, double depthMax, String dateMin, String dateMax, int start, int sizeMax, boolean metadata, String metadataSelection, String order) {
        return search(dataName, latitudeMin, latitudeMax, longitudeMin, longitudeMax, depthMin, depthMax, dateMin, dateMax, start, sizeMax, metadata, metadataSelection, order, null);
    }

    public ResultSet search(String dataName, double latitudeMin, double latitudeMax, double longitudeMin, double longitudeMax, double depthMin, double depthMax, String dateMin, String dateMax, int start, int sizeMax, boolean metadata, String metadataSelection, String order, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(NAMESPACE, "search");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("dataName", dataName);
        soapReq.addProperty("latitudeMin", latitudeMin);
        soapReq.addProperty("latitudeMax", latitudeMax);
        soapReq.addProperty("longitudeMin", longitudeMin);
        soapReq.addProperty("longitudeMax", longitudeMax);
        soapReq.addProperty("depthMin", depthMin);
        soapReq.addProperty("depthMax", depthMax);
        soapReq.addProperty("dateMin", dateMin);
        soapReq.addProperty("dateMax", dateMax);
        soapReq.addProperty("start", start);
        soapReq.addProperty("sizeMax", sizeMax);
        soapReq.addProperty("metadata", metadata);
        soapReq.addProperty("metadataSelection", metadataSelection);
        soapReq.addProperty("order", order);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        httpTransport.debug = true;
        try {
            if (headers != null) {
                httpTransport.call(NAMESPACE + "/search", soapEnvelope, headers);
                Log.v("dump Request: ", httpTransport.requestDump);
                Log.v("dump response: ", httpTransport.responseDump);
            } else {
                httpTransport.call(NAMESPACE + "/search", soapEnvelope);
                Log.v("dump Request: ", httpTransport.requestDump);
                Log.v("dump response: ", httpTransport.responseDump);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    ResultSet resultVariable = new ResultSet(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

}
